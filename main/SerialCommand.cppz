
/*** GLOBALS ***/
char commandBuf[commandBuf_MAX] = "";    // a String to hold incoming data

void CommandCheckSerial(){
	// Process any incoming characters from the serial port
	while( Serial.available( ) > 0 ) {
		char c = Serial.read( );
		// Add any characters that aren't the end of a command (semicolon) to the input buffer.
		if( c != ';' && c != '\n' ) {
			c = toupper( c );
			strncat( commandBuf, &c, 1 );
		} else {
			// Parse the command because an end of command token was encountered.
			parseCommand( commandBuf );

			// clear the string:
			memset( commandBuf, 0, commandBuf_MAX );
		}
	}
}

void parseCommand( char *commandBuf ) {
	ESP_LOGD( LOGT , "parsing command: " + (String)commandBuf );
	if( strcmp( commandBuf, "SET DUTY" ) == 0 ) {
		int new_pwm_percent = ( (String)commandBuf ).substring( 9 ).toInt( );
		ESP_LOGD( LOGT , "Setting new duty cycle percentage to:" + new_pwm_percent );
		set_duty_percent( new_pwm_percent );
	}
	// clear the string:
	commandBuf = "";
}